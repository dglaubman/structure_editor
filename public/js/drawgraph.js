// Generated by CoffeeScript 1.6.3
(function() {
  var NARROW, WIDE, colorBuilder, graph, nodeSep, rankDir, render, root, update, _graph;

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  _graph = void 0;

  root.graph = graph = function(adjacencies) {
    if (arguments.length > 0) {
      return _graph = adjacencies;
    } else {
      return _graph;
    }
  };

  root.update = update = function(input) {
    var path;
    path = "data/" + input + ".json";
    d3.json(path, render);
    return input;
  };

  root.render = render = function(adjacencies) {
    var colors, edges, height, layout, margin, nodes, oldDrawEdgeLabel, oldDrawNode, renderer, svg, width;
    colors = colorBuilder();
    graph(adjacencies);
    margin = {
      top: 20,
      right: 20,
      bottom: 20,
      left: 20
    };
    width = adjacencies.width || 920;
    height = adjacencies.height || 900;
    d3.selectAll("svg.chart").remove();
    svg = d3.select("#chart").append("svg").attr("width", width + margin.left + margin.right).attr("height", height + margin.top + margin.bottom).style("margin-left", -margin.left + "px").classed("chart", true).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");
    nodes = adjacencies.nodes;
    edges = adjacencies.edges;
    renderer = new dagreD3.Renderer();
    oldDrawNode = renderer.drawNode();
    oldDrawEdgeLabel = renderer.drawEdgeLabel();
    renderer.drawNode(function(g, u, svg) {
      var key;
      key = g._nodes[u].value.key;
      oldDrawNode(g, u, svg);
      svg.attr("id", "node-" + u);
      return svg.classed(colors(key), true);
    });
    renderer.drawEdgeLabel(function(g, e, svg) {
      var val;
      oldDrawEdgeLabel(g, e, svg);
      val = g._edges[e].value;
      svg.attr("class", val.type);
      if (val.type === "choose") {
        return svg.attr("class", val.tag);
      }
    });
    layout = dagreD3.layout().nodeSep(nodeSep).rankDir(rankDir);
    renderer.layout(layout).run(dagreD3.json.decode(nodes, edges), d3.select("#chart svg g"));
    return d3.selectAll("svg .node").append('g').classed('stat', true).attr("transform", "translate(0, 40)").append('text');
  };

  colorBuilder = function() {
    var index, namespaces;
    namespaces = {
      my: 'ns-0',
      Our: 'ns-0',
      _none_: 'ns-0'
    };
    index = 1;
    return function(key) {
      var barename, ns, _ref;
      _ref = key.split(':'), ns = _ref[0], barename = _ref[1];
      if (!barename) {
        ns = "_none_";
      }
      return namespaces[ns] || (namespaces[ns] = "ns-" + (index++));
    };
  };

  WIDE = 60;

  NARROW = 30;

  nodeSep = NARROW;

  root.toggleNodeSeparation = function() {
    if (nodeSep === WIDE) {
      nodeSep = NARROW;
    } else {
      nodeSep = WIDE;
    }
    return render(graph());
  };

  rankDir = "TB";

  root.toggleDirection = function() {
    if (rankDir === "TB") {
      rankDir = "LR";
    } else {
      rankDir = "TB";
    }
    return render(graph());
  };

}).call(this);
