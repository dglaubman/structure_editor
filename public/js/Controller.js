// Generated by CoffeeScript 1.6.3
(function() {
  var Server, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof exports !== "undefined" && exports !== null ? exports : window;

  root.Controller = (function() {
    var avail, cache, inuse, make, numSlots, unmake;

    function Controller(log) {
      this.log = log;
    }

    Controller.prototype.stat = function(pid, losses) {
      return this.log.write("" + pid + ": " + losses);
    };

    Controller.prototype.ready = function(type, name, load) {
      var server;
      server = cache[name] != null ? cache[name] : cache[name] = make(type, name, this.stopServer, this.log);
      return server.updateLoad(load);
    };

    Controller.prototype.stopped = function(name) {
      return unmake(name);
    };

    Controller.prototype.dataReady = function(at, text) {};

    Controller.prototype.stopServer = function(event) {
      return alert("please set action for Controller.stopServer");
    };

    make = function(type, name, stopServer) {
      var next, slot;
      next = $.inArray(1, avail);
      if (next !== -1) {
        avail[next] = 0;
        inuse[name] = next;
        slot = $("ul.template." + type).children().clone();
        $("ul.target." + type + "s").append(slot);
        return new Server(slot, type, name, stopServer);
      }
    };

    unmake = function(name) {
      var widget;
      widget = cache[name];
      if (widget != null) {
        widget.die();
      }
      delete cache[name];
      avail[inuse[name]] = 1;
      return delete inuse[name];
    };

    numSlots = 30;

    avail = (function() {
      var _i, _results;
      _results = [];
      for (_i = 0; 0 <= numSlots ? _i < numSlots : _i > numSlots; 0 <= numSlots ? _i++ : _i--) {
        _results.push(1);
      }
      return _results;
    })();

    cache = {};

    inuse = {};

    return Controller;

  })();

  Server = (function() {
    function Server(widget, type, name, stop, log) {
      var at,
        _this = this;
      this.widget = widget;
      this.log = log;
      this.log = __bind(this.log, this);
      at = name;
      $(".at", this.widget).html(at);
      $(".close", this.widget).on('click', function() {
        stop(name);
        return $(_this.widget).css("background-color", "lightgrey");
      });
    }

    Server.prototype.log = function(text) {
      return this.log.write(text);
    };

    Server.prototype.die = function() {
      var _this = this;
      return this.widget.hide('slow', function() {
        return _this.widget.remove();
      });
    };

    Server.prototype.updateLoad = function(load) {
      var color;
      load = Math.min(parseInt(load, 10), 100);
      switch (load) {
        case 100:
          $(".verticalBar", this.widget).css("background-color", "red");
          break;
        default:
          color = Math.floor(load * 256 / 100);
          $(".verticalBar", this.widget).css("background-color", "rgb(" + color + ",255,0)");
      }
      return $(".verticalBar", this.widget).css("height", "" + load + "%");
    };

    return Server;

  })();

}).call(this);
